{
  "address": "0x3b5dfaE051C76B6836F3B6Fb8f440589a054207b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmoutDonated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedObject",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "widthdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x164a723a9a29fae179f32c32693c8423e630c63672916640a4e0d601447ccb7b",
  "receipt": {
    "to": null,
    "from": "0x3C56e5aaC093051680aF7f82110425b7B8Ce38c9",
    "contractAddress": "0x3b5dfaE051C76B6836F3B6Fb8f440589a054207b",
    "transactionIndex": 32,
    "gasUsed": "866238",
    "logsBloom": "0x
    "blockHash": "0x1308ffb968ccdaefcaa997554ca1bb51ad4889a3e06415b0f4f89182d3bf8587",
    "transactionHash": "0x164a723a9a29fae179f32c32693c8423e630c63672916640a4e0d601447ccb7b",
    "logs": [],
    "blockNumber": 3398388,
    "cumulativeGasUsed": "3321365",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "e2668a83730fe6fc705e77fc4571c867",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmoutDonated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedObject\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"widthdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//using custom errors\\n//makes the contract more gas efficient because we don't have to store error strings in memory\\n\\nerror NotOwner();\\n\\n\\ncontract FundMe{\\n\\n    using PriceConverter for uint256;\\n    //meaning any uint256 variable can now call functions from this library\\n    //as if it were an object\\n\\n    //$50 at least\\n    //uint256 public minimumUSD = 50 * 1e18; beacuse the value returned by other functions will have 18 zeros\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmoutDonated;\\n\\n    //making the variables immutable and constant saves gas because they require less memory\\n    //and there values can be read at compile time and stored directly in the byte code\\n    //constant because we're also initializing it here\\n    //immutable because we're at least setting its value once (inside the constructor)\\n\\n    address public immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    AggregatorV3Interface public priceFeedObject;\\n\\n    //constructors run when the contract is deployed, so when this runs the msg.sender will be the contrac owner\\n    constructor(address priceFeedAddress){\\n        i_owner = msg.sender;\\n        priceFeedObject = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable{\\n        //getConversionRate(msg.value) becomes msg.value.getConversionRate();\\n        //and the msg.value becomes the first argument passed to the getConversionRate()\\n        require(msg.value.getConversionRate(priceFeedObject) > MINIMUM_USD, \\\"Must send greater than 50 dollars!\\\");\\n        funders.push(msg.sender);\\n        addressToAmoutDonated[msg.sender] = msg.value;\\n    }\\n\\n    //the onlyOwner modifier will run the modifier block and check if the sender is owner (user defined modifier)\\n    function widthdraw() public onlyOwner{\\n\\n        for(uint256 i = 0; i < funders.length; i++){\\n            //getting the address one by one\\n            address funder = funders[i];\\n\\n            //setting the amount on this address key to 0\\n            addressToAmoutDonated[funder] = 0;\\n        }\\n\\n        //now we need to reset the funders array as well\\n\\n        //we are just gonna make it point to a new address array with 0 elements in it to begin with\\n        funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed!\\\");\\n\\n        //three ways to send native blockchain currency\\n\\n        //transfer function\\n        // msg.sender.transfer(this.balance)\\n        //typecasting *msg.sender* address to a *payable* address (where we can send money to)\\n        //typecasting *this* (current address reference) to, well, an address\\n        //automatically reverts\\n        // payable(msg.sender).transfer(address(this).balance)\\n\\n        //send function\\n        //returns a bool, so we need to explicitly check for success and revert\\n        // bool isSent = payable(msg.sender).send(address(this).balance);\\n        // require(isSent, \\\"Couldn't send money!\\\");\\n\\n        //call function --> recommended way -- a lower level call\\n        //this allows us to call any function on the entirety of ethereum blockchain\\n        //we're not really calling any function here so we're gonna leave that argument as an empty string\\n        //although what we can do is send some money with it\\n        //so we're sending the current balance and passing in the *value* that we usually pass when calling the fund function\\n\\n        //the bytes variable stores whatever is returned by the function call we specify\\n        //using the memory keyword because bytes is gonna be an array (which is not a primitive data type)\\n\\n        //(bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    modifier onlyOwner{\\n        //require(msg.sender == i_owner, \\\"Unauthorized access! Sender is not owner\\\"); //--> do this first\\n        \\n        //same as the above require, new and recommended (more gas efficient)\\n        if(msg.sender != i_owner){\\n            revert NotOwner();\\n        }\\n        _; //--> execute the rest of the function later\\n    }\\n\\n    //           is msg.data empty?\\n    //                /      \\\\\\n    //              yes       no\\n    //              /          \\\\\\n    //         recieve hai?    fallback()\\n    //          /      \\\\\\n    //         yes     no\\n    //        /          \\\\\\n    //    receive()    fallback()\\n\\n    //what happens when someone sends this contract money without calling the fund function???\\n    //just like how I was trying to send ETH through MetaMask, I can't really call the fund function there, right?\\n\\n    //so when that's the case, the *receive* function will run\\n    //receive function runs when there is no data with the transaction\\n    // ie, when it's not specified which function to call\\n    receive() external payable{\\n        fund();\\n    }\\n\\n    //fallback is another function that runs when the function is specified but it doesn't exit\\n    //that's why it's a fallback \\u00af\\\\_(\\u30c4)_/\\u00af \\n    fallback() external{\\n        fund();\\n    }\\n}\",\"keccak256\":\"0xf2988844c3fea784c2ff19ac4c0db45df55ea1b1a751baf55a2882d8032618cf\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n//the logic for this interface is defined in the smart contract whose address is pasted below\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n//the import statement referes to the npm package on npmjs website\\r\\n\\r\\nlibrary PriceConverter{\\r\\n\\r\\n    //gonna use chainlink data feeds to get the price\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\\r\\n        //we are gonna contact a contract that can comminucate to the chainlink data feed to get the price\\r\\n        //for that, we need the address of the contract, and the ABI (interface which defines all the functions)\\r\\n\\r\\n        (\\r\\n            ,int256 price,,,\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        //price of ETH in terms of USD\\r\\n        //the price is gonna be in dollars ie 150000000000 -> actual is 1500.00000000\\r\\n        //because this contract has 8 decimal places, can be checked by calling the demicals()\\r\\n\\r\\n        //typecasting to uint256 because msg.value is a uint256 variable\\r\\n\\r\\n        //the decimal places in the contract is 8, but our msg.value is gonna have 18 decimal places\\r\\n        //because 1 eth = 1000000000000000000 wei\\r\\n\\r\\n        //to match the decimal places we need to multiply the returned price with 8 decimal places with 1e10\\r\\n        // ie 1.0000000000\\r\\n\\r\\n        return uint256 (price * 1e10);\\r\\n    }\\r\\n\\r\\n\\r\\n    //the first argument is what the function is being called on\\r\\n    //kinda like the implicit argument, but here its kinda explicit\\r\\n\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeedObject) internal view returns (uint256){\\r\\n        uint256 ethPrice = getPrice(priceFeedObject);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3460d46431a2940d0b2db9c5d19b80a4cff9dc6ff9de601b95286ee908ea372f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610faf380380610faf83398181016040528101906100329190610113565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610140565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e0826100b5565b9050919050565b6100f0816100d5565b81146100fb57600080fd5b50565b60008151905061010d816100e7565b92915050565b600060208284031215610129576101286100b0565b5b6000610137848285016100fe565b91505092915050565b60805160601c610e4a610165600039600081816102f8015261056b0152610e4a6000f3fe6080604052600436106100745760003560e01c8063928f85711161004e578063928f857114610119578063b60d428814610144578063dba6335f1461014e578063dc0d3dff1461017957610083565b80633aafb22a1461009a57806352b50a2a146100d75780636b69a592146100ee57610083565b36610083576100816101b6565b005b34801561008f57600080fd5b506100986101b6565b005b3480156100a657600080fd5b506100c160048036038101906100bc91906107b2565b6102de565b6040516100ce91906107f8565b60405180910390f35b3480156100e357600080fd5b506100ec6102f6565b005b3480156100fa57600080fd5b50610103610536565b60405161011091906107f8565b60405180910390f35b34801561012557600080fd5b5061012e610543565b60405161013b9190610872565b60405180910390f35b61014c6101b6565b005b34801561015a57600080fd5b50610163610569565b604051610170919061089c565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b91906108e3565b61058d565b6040516101ad919061089c565b60405180910390f35b6802b5e3af16b18800006101f5600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105cc90919063ffffffff16565b11610235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022c90610993565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037b576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104265760008082815481106103a05761039f6109b3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041e90610a11565b91505061037e565b50600067ffffffffffffffff81111561044257610441610a5a565b5b6040519080825280602002602001820160405280156104705781602001602082028036833780820191505090505b50600090805190602001906104869291906106a8565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ad90610aba565b60006040518083038185875af1925050503d80600081146104ea576040519150601f19603f3d011682016040523d82523d6000602084013e6104ef565b606091505b5050905080610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90610b1b565b60405180910390fd5b50565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d883610608565b90506000670de0b6b3a764000085836105f19190610b3b565b6105fb9190610bc4565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610c82565b5050509150506402540be400816106a09190610cfd565b915050919050565b828054828255906000526020600020908101928215610721579160200282015b828111156107205782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c8565b5b50905061072e9190610732565b5090565b5b8082111561074b576000816000905550600101610733565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077f82610754565b9050919050565b61078f81610774565b811461079a57600080fd5b50565b6000813590506107ac81610786565b92915050565b6000602082840312156107c8576107c761074f565b5b60006107d68482850161079d565b91505092915050565b6000819050919050565b6107f2816107df565b82525050565b600060208201905061080d60008301846107e9565b92915050565b6000819050919050565b600061083861083361082e84610754565b610813565b610754565b9050919050565b600061084a8261081d565b9050919050565b600061085c8261083f565b9050919050565b61086c81610851565b82525050565b60006020820190506108876000830184610863565b92915050565b61089681610774565b82525050565b60006020820190506108b1600083018461088d565b92915050565b6108c0816107df565b81146108cb57600080fd5b50565b6000813590506108dd816108b7565b92915050565b6000602082840312156108f9576108f861074f565b5b6000610907848285016108ce565b91505092915050565b600082825260208201905092915050565b7f4d7573742073656e642067726561746572207468616e20353020646f6c6c617260008201527f7321000000000000000000000000000000000000000000000000000000000000602082015250565b600061097d602283610910565b915061098882610921565b604082019050919050565b600060208201905081810360008301526109ac81610970565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a1c826107df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a4f57610a4e6109e2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610aa4600083610a89565b9150610aaf82610a94565b600082019050919050565b6000610ac582610a97565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610b05600c83610910565b9150610b1082610acf565b602082019050919050565b60006020820190508181036000830152610b3481610af8565b9050919050565b6000610b46826107df565b9150610b51836107df565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b8a57610b896109e2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bcf826107df565b9150610bda836107df565b925082610bea57610be9610b95565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c1481610bf5565b8114610c1f57600080fd5b50565b600081519050610c3181610c0b565b92915050565b6000819050919050565b610c4a81610c37565b8114610c5557600080fd5b50565b600081519050610c6781610c41565b92915050565b600081519050610c7c816108b7565b92915050565b600080600080600060a08688031215610c9e57610c9d61074f565b5b6000610cac88828901610c22565b9550506020610cbd88828901610c58565b9450506040610cce88828901610c6d565b9350506060610cdf88828901610c6d565b9250506080610cf088828901610c22565b9150509295509295909350565b6000610d0882610c37565b9150610d1383610c37565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d5257610d516109e2565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d8f57610d8e6109e2565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610dcc57610dcb6109e2565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e0957610e086109e2565b5b82820290509291505056fea264697066735822122043c380f579b5f8fbffc1ffa1adbab8b105ec8cb419b8e10a07940297ccf455d064736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063928f85711161004e578063928f857114610119578063b60d428814610144578063dba6335f1461014e578063dc0d3dff1461017957610083565b80633aafb22a1461009a57806352b50a2a146100d75780636b69a592146100ee57610083565b36610083576100816101b6565b005b34801561008f57600080fd5b506100986101b6565b005b3480156100a657600080fd5b506100c160048036038101906100bc91906107b2565b6102de565b6040516100ce91906107f8565b60405180910390f35b3480156100e357600080fd5b506100ec6102f6565b005b3480156100fa57600080fd5b50610103610536565b60405161011091906107f8565b60405180910390f35b34801561012557600080fd5b5061012e610543565b60405161013b9190610872565b60405180910390f35b61014c6101b6565b005b34801561015a57600080fd5b50610163610569565b604051610170919061089c565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b91906108e3565b61058d565b6040516101ad919061089c565b60405180910390f35b6802b5e3af16b18800006101f5600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105cc90919063ffffffff16565b11610235576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022c90610993565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037b576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6000805490508110156104265760008082815481106103a05761039f6109b3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041e90610a11565b91505061037e565b50600067ffffffffffffffff81111561044257610441610a5a565b5b6040519080825280602002602001820160405280156104705781602001602082028036833780820191505090505b50600090805190602001906104869291906106a8565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ad90610aba565b60006040518083038185875af1925050503d80600081146104ea576040519150601f19603f3d011682016040523d82523d6000602084013e6104ef565b606091505b5050905080610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90610b1b565b60405180910390fd5b50565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d883610608565b90506000670de0b6b3a764000085836105f19190610b3b565b6105fb9190610bc4565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065157600080fd5b505afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190610c82565b5050509150506402540be400816106a09190610cfd565b915050919050565b828054828255906000526020600020908101928215610721579160200282015b828111156107205782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c8565b5b50905061072e9190610732565b5090565b5b8082111561074b576000816000905550600101610733565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077f82610754565b9050919050565b61078f81610774565b811461079a57600080fd5b50565b6000813590506107ac81610786565b92915050565b6000602082840312156107c8576107c761074f565b5b60006107d68482850161079d565b91505092915050565b6000819050919050565b6107f2816107df565b82525050565b600060208201905061080d60008301846107e9565b92915050565b6000819050919050565b600061083861083361082e84610754565b610813565b610754565b9050919050565b600061084a8261081d565b9050919050565b600061085c8261083f565b9050919050565b61086c81610851565b82525050565b60006020820190506108876000830184610863565b92915050565b61089681610774565b82525050565b60006020820190506108b1600083018461088d565b92915050565b6108c0816107df565b81146108cb57600080fd5b50565b6000813590506108dd816108b7565b92915050565b6000602082840312156108f9576108f861074f565b5b6000610907848285016108ce565b91505092915050565b600082825260208201905092915050565b7f4d7573742073656e642067726561746572207468616e20353020646f6c6c617260008201527f7321000000000000000000000000000000000000000000000000000000000000602082015250565b600061097d602283610910565b915061098882610921565b604082019050919050565b600060208201905081810360008301526109ac81610970565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a1c826107df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a4f57610a4e6109e2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610aa4600083610a89565b9150610aaf82610a94565b600082019050919050565b6000610ac582610a97565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610b05600c83610910565b9150610b1082610acf565b602082019050919050565b60006020820190508181036000830152610b3481610af8565b9050919050565b6000610b46826107df565b9150610b51836107df565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b8a57610b896109e2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610bcf826107df565b9150610bda836107df565b925082610bea57610be9610b95565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c1481610bf5565b8114610c1f57600080fd5b50565b600081519050610c3181610c0b565b92915050565b6000819050919050565b610c4a81610c37565b8114610c5557600080fd5b50565b600081519050610c6781610c41565b92915050565b600081519050610c7c816108b7565b92915050565b600080600080600060a08688031215610c9e57610c9d61074f565b5b6000610cac88828901610c22565b9550506020610cbd88828901610c58565b9450506040610cce88828901610c6d565b9350506060610cdf88828901610c6d565b9250506080610cf088828901610c22565b9150509295509295909350565b6000610d0882610c37565b9150610d1383610c37565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d5257610d516109e2565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610d8f57610d8e6109e2565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610dcc57610dcb6109e2565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e0957610e086109e2565b5b82820290509291505056fea264697066735822122043c380f579b5f8fbffc1ffa1adbab8b105ec8cb419b8e10a07940297ccf455d064736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmoutDonated",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeedObject",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}